# The make command can set the following variables, e.g., make "VAR=val".
# ACXX_OPTS: options appended to the tool command.
# ASPECT_PREFIXES: the prefixes of the aspect files used.

# The parent Makefile can set the following variables:
# COPY_MAKEFILES: the command for copying makefiles.
#   It can be omitted if you use the default command.
# COPY_MORE_MAKEFILES: the additional command for copying makefiles.
# CUSTOM_TARGETS: the customized targets to be run in instrumentation and build.
#   Note that all details of these targets should be given in the parent Makefile.
#   No more actions are executed except these given targets.
# TARGETS: the targets (in the original benchmark) to be instrumented.
#   It can be omitted if you use the default target.
# USE_COMPDB: YES/NO - whether use compilation database in instrumentation.
# MORE_ACXX_OPTS: options appended to the tool command.
# PRE_INSTR_CMDS:  additional commands to be executed before instrumentation.
# POST_INSTR_CMDS: additional commands to be executed after instrumentation.
# CLEAN_CMDS: additional commands for a customized clean.
#
# ERROR_FILES: the names of the files that contain reported errors.
#   You can use RUNTYPE in file names to match the run type, e.g., small and large.

# Set the path and options of the tool
# NOTE: the options are generated by the command "ag++ --gen_config".
ACXX := ac++ --extension c -D __x86_64__ \
--builtin_operators \
--data_joinpoints \
--skip-bodies-non-prj \
-D __puma \
-D __STDC__ \
-D "_GNU_SOURCE=1" \
-D "_LP64=1" \
-D "_STDC_PREDEF_H=1" \
-D "__ATOMIC_ACQUIRE=2" \
-D "__ATOMIC_ACQ_REL=4" \
-D "__ATOMIC_CONSUME=1" \
-D "__ATOMIC_HLE_ACQUIRE=65536" \
-D "__ATOMIC_HLE_RELEASE=131072" \
-D "__ATOMIC_RELAXED=0" \
-D "__ATOMIC_RELEASE=3" \
-D "__ATOMIC_SEQ_CST=5" \
-D "__BIGGEST_ALIGNMENT__=16" \
-D "__BYTE_ORDER__=__ORDER_LITTLE_ENDIAN__" \
-D "__CHAR16_TYPE__=short unsigned int" \
-D "__CHAR32_TYPE__=unsigned int" \
-D "__CHAR_BIT__=8" \
-D "__DBL_DECIMAL_DIG__=17" \
-D "__DBL_DENORM_MIN__=double(4.94065645841246544177e-324L)" \
-D "__DBL_DIG__=15" \
-D "__DBL_EPSILON__=double(2.22044604925031308085e-16L)" \
-D "__DBL_HAS_DENORM__=1" \
-D "__DBL_HAS_INFINITY__=1" \
-D "__DBL_HAS_QUIET_NAN__=1" \
-D "__DBL_MANT_DIG__=53" \
-D "__DBL_MAX_10_EXP__=308" \
-D "__DBL_MAX_EXP__=1024" \
-D "__DBL_MAX__=double(1.79769313486231570815e+308L)" \
-D "__DBL_MIN_10_EXP__=(-307)" \
-D "__DBL_MIN_EXP__=(-1021)" \
-D "__DBL_MIN__=double(2.22507385850720138309e-308L)" \
-D "__DEC128_EPSILON__=1E-33DL" \
-D "__DEC128_MANT_DIG__=34" \
-D "__DEC128_MAX_EXP__=6145" \
-D "__DEC128_MAX__=9.999999999999999999999999999999999E6144DL" \
-D "__DEC128_MIN_EXP__=(-6142)" \
-D "__DEC128_MIN__=1E-6143DL" \
-D "__DEC128_SUBNORMAL_MIN__=0.000000000000000000000000000000001E-6143DL" \
-D "__DEC32_EPSILON__=1E-6DF" \
-D "__DEC32_MANT_DIG__=7" \
-D "__DEC32_MAX_EXP__=97" \
-D "__DEC32_MAX__=9.999999E96DF" \
-D "__DEC32_MIN_EXP__=(-94)" \
-D "__DEC32_MIN__=1E-95DF" \
-D "__DEC32_SUBNORMAL_MIN__=0.000001E-95DF" \
-D "__DEC64_EPSILON__=1E-15DD" \
-D "__DEC64_MANT_DIG__=16" \
-D "__DEC64_MAX_EXP__=385" \
-D "__DEC64_MAX__=9.999999999999999E384DD" \
-D "__DEC64_MIN_EXP__=(-382)" \
-D "__DEC64_MIN__=1E-383DD" \
-D "__DEC64_SUBNORMAL_MIN__=0.000000000000001E-383DD" \
-D "__DECIMAL_BID_FORMAT__=1" \
-D "__DECIMAL_DIG__=21" \
-D "__DEC_EVAL_METHOD__=2" \
-D "__DEPRECATED=1" \
-D "__ELF__=1" \
-D "__EXCEPTIONS=1" \
-D "__FINITE_MATH_ONLY__=0" \
-D "__FLOAT_WORD_ORDER__=__ORDER_LITTLE_ENDIAN__" \
-D "__FLT_DECIMAL_DIG__=9" \
-D "__FLT_DENORM_MIN__=1.40129846432481707092e-45F" \
-D "__FLT_DIG__=6" \
-D "__FLT_EPSILON__=1.19209289550781250000e-7F" \
-D "__FLT_EVAL_METHOD__=0" \
-D "__FLT_HAS_DENORM__=1" \
-D "__FLT_HAS_INFINITY__=1" \
-D "__FLT_HAS_QUIET_NAN__=1" \
-D "__FLT_MANT_DIG__=24" \
-D "__FLT_MAX_10_EXP__=38" \
-D "__FLT_MAX_EXP__=128" \
-D "__FLT_MAX__=3.40282346638528859812e+38F" \
-D "__FLT_MIN_10_EXP__=(-37)" \
-D "__FLT_MIN_EXP__=(-125)" \
-D "__FLT_MIN__=1.17549435082228750797e-38F" \
-D "__FLT_RADIX__=2" \
-D "__FXSR__=1" \
-D "__GCC_ATOMIC_BOOL_LOCK_FREE=2" \
-D "__GCC_ATOMIC_CHAR16_T_LOCK_FREE=2" \
-D "__GCC_ATOMIC_CHAR32_T_LOCK_FREE=2" \
-D "__GCC_ATOMIC_CHAR_LOCK_FREE=2" \
-D "__GCC_ATOMIC_INT_LOCK_FREE=2" \
-D "__GCC_ATOMIC_LLONG_LOCK_FREE=2" \
-D "__GCC_ATOMIC_LONG_LOCK_FREE=2" \
-D "__GCC_ATOMIC_POINTER_LOCK_FREE=2" \
-D "__GCC_ATOMIC_SHORT_LOCK_FREE=2" \
-D "__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1" \
-D "__GCC_ATOMIC_WCHAR_T_LOCK_FREE=2" \
-D "__GCC_HAVE_DWARF2_CFI_ASM=1" \
-D "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1=1" \
-D "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2=1" \
-D "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4=1" \
-D "__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8=1" \
-D "__GCC_IEC_559=2" \
-D "__GCC_IEC_559_COMPLEX=2" \
-D "__GLIBCXX_BITSIZE_INT_N_0=128" \
-D "__GLIBCXX_TYPE_INT_N_0=__int128" \
-D "__GNUC_GNU_INLINE__=1" \
-D "__GNUC_MINOR__=4" \
-D "__GNUC_PATCHLEVEL__=0" \
-D "__GNUC__=5" \
-D "__GNUG__=5" \
-D "__GXX_ABI_VERSION=1009" \
-D "__GXX_RTTI=1" \
-D "__GXX_WEAK__=1" \
-D "__INT16_C(c)=c" \
-D "__INT16_MAX__=0x7fff" \
-D "__INT16_TYPE__=short int" \
-D "__INT32_C(c)=c" \
-D "__INT32_MAX__=0x7fffffff" \
-D "__INT32_TYPE__=int" \
-D "__INT64_MAX__=0x7fffffffffffffffL" \
-D "__INT64_TYPE__=long int" \
-D "__INT8_C(c)=c" \
-D "__INT8_MAX__=0x7f" \
-D "__INT8_TYPE__=signed char" \
-D "__INTMAX_MAX__=0x7fffffffffffffffL" \
-D "__INTMAX_TYPE__=long int" \
-D "__INTPTR_MAX__=0x7fffffffffffffffL" \
-D "__INTPTR_TYPE__=long int" \
-D "__INT_FAST16_MAX__=0x7fffffffffffffffL" \
-D "__INT_FAST16_TYPE__=long int" \
-D "__INT_FAST32_MAX__=0x7fffffffffffffffL" \
-D "__INT_FAST32_TYPE__=long int" \
-D "__INT_FAST64_MAX__=0x7fffffffffffffffL" \
-D "__INT_FAST64_TYPE__=long int" \
-D "__INT_FAST8_MAX__=0x7f" \
-D "__INT_FAST8_TYPE__=signed char" \
-D "__INT_LEAST16_MAX__=0x7fff" \
-D "__INT_LEAST16_TYPE__=short int" \
-D "__INT_LEAST32_MAX__=0x7fffffff" \
-D "__INT_LEAST32_TYPE__=int" \
-D "__INT_LEAST64_MAX__=0x7fffffffffffffffL" \
-D "__INT_LEAST64_TYPE__=long int" \
-D "__INT_LEAST8_MAX__=0x7f" \
-D "__INT_LEAST8_TYPE__=signed char" \
-D "__INT_MAX__=0x7fffffff" \
-D "__LDBL_DENORM_MIN__=3.64519953188247460253e-4951L" \
-D "__LDBL_DIG__=18" \
-D "__LDBL_EPSILON__=1.08420217248550443401e-19L" \
-D "__LDBL_HAS_DENORM__=1" \
-D "__LDBL_HAS_INFINITY__=1" \
-D "__LDBL_HAS_QUIET_NAN__=1" \
-D "__LDBL_MANT_DIG__=64" \
-D "__LDBL_MAX_10_EXP__=4932" \
-D "__LDBL_MAX_EXP__=16384" \
-D "__LDBL_MAX__=1.18973149535723176502e+4932L" \
-D "__LDBL_MIN_10_EXP__=(-4931)" \
-D "__LDBL_MIN_EXP__=(-16381)" \
-D "__LDBL_MIN__=3.36210314311209350626e-4932L" \
-D "__LONG_LONG_MAX__=0x7fffffffffffffffLL" \
-D "__LONG_MAX__=0x7fffffffffffffffL" \
-D "__LP64__=1" \
-D "__MMX__=1" \
-D "__NO_INLINE__=1" \
-D "__ORDER_BIG_ENDIAN__=4321" \
-D "__ORDER_LITTLE_ENDIAN__=1234" \
-D "__ORDER_PDP_ENDIAN__=3412" \
-D "__PRAGMA_REDEFINE_EXTNAME=1" \
-D "__PTRDIFF_MAX__=0x7fffffffffffffffL" \
-D "__PTRDIFF_TYPE__=long int" \
--ptrdiff-type "long int" \
-D "__REGISTER_PREFIX__" \
-D "__SCHAR_MAX__=0x7f" \
-D "__SHRT_MAX__=0x7fff" \
-D "__SIG_ATOMIC_MAX__=0x7fffffff" \
-D "__SIG_ATOMIC_MIN__=(-__SIG_ATOMIC_MAX__ - 1)" \
-D "__SIG_ATOMIC_TYPE__=int" \
-D "__SIZEOF_DOUBLE__=8" \
-D "__SIZEOF_FLOAT128__=16" \
-D "__SIZEOF_FLOAT80__=16" \
-D "__SIZEOF_FLOAT__=4" \
-D "__SIZEOF_INT128__=16" \
-D "__SIZEOF_INT__=4" \
-D "__SIZEOF_LONG_DOUBLE__=16" \
-D "__SIZEOF_LONG_LONG__=8" \
-D "__SIZEOF_LONG__=8" \
-D "__SIZEOF_POINTER__=8" \
-D "__SIZEOF_PTRDIFF_T__=8" \
-D "__SIZEOF_SHORT__=2" \
-D "__SIZEOF_SIZE_T__=8" \
-D "__SIZEOF_WCHAR_T__=4" \
-D "__SIZEOF_WINT_T__=4" \
-D "__SIZE_MAX__=0xffffffffffffffffUL" \
-D "__SIZE_TYPE__=long unsigned int" \
--size-type "long unsigned int" \
-D "__SSE2_MATH__=1" \
-D "__SSE2__=1" \
-D "__SSE_MATH__=1" \
-D "__SSE__=1" \
-D "__SSP_STRONG__=3" \
-D "__STDC_HOSTED__=1" \
-D "__STDC_IEC_559_COMPLEX__=1" \
-D "__STDC_IEC_559__=1" \
-D "__STDC_ISO_10646__=201505L" \
-D "__STDC_NO_THREADS__=1" \
-D "__STDC__=1" \
-D "__UINT16_C(c)=c" \
-D "__UINT16_MAX__=0xffff" \
-D "__UINT16_TYPE__=short unsigned int" \
-D "__UINT32_MAX__=0xffffffffU" \
-D "__UINT32_TYPE__=unsigned int" \
-D "__UINT64_MAX__=0xffffffffffffffffUL" \
-D "__UINT64_TYPE__=long unsigned int" \
-D "__UINT8_C(c)=c" \
-D "__UINT8_MAX__=0xff" \
-D "__UINT8_TYPE__=unsigned char" \
-D "__UINTMAX_MAX__=0xffffffffffffffffUL" \
-D "__UINTMAX_TYPE__=long unsigned int" \
-D "__UINTPTR_MAX__=0xffffffffffffffffUL" \
-D "__UINTPTR_TYPE__=long unsigned int" \
-D "__UINT_FAST16_MAX__=0xffffffffffffffffUL" \
-D "__UINT_FAST16_TYPE__=long unsigned int" \
-D "__UINT_FAST32_MAX__=0xffffffffffffffffUL" \
-D "__UINT_FAST32_TYPE__=long unsigned int" \
-D "__UINT_FAST64_MAX__=0xffffffffffffffffUL" \
-D "__UINT_FAST64_TYPE__=long unsigned int" \
-D "__UINT_FAST8_MAX__=0xff" \
-D "__UINT_FAST8_TYPE__=unsigned char" \
-D "__UINT_LEAST16_MAX__=0xffff" \
-D "__UINT_LEAST16_TYPE__=short unsigned int" \
-D "__UINT_LEAST32_MAX__=0xffffffffU" \
-D "__UINT_LEAST32_TYPE__=unsigned int" \
-D "__UINT_LEAST64_MAX__=0xffffffffffffffffUL" \
-D "__UINT_LEAST64_TYPE__=long unsigned int" \
-D "__UINT_LEAST8_MAX__=0xff" \
-D "__UINT_LEAST8_TYPE__=unsigned char" \
-D "__USER_LABEL_PREFIX__" \
-D "__VERSION__=\"5.4.0 20160609\"" \
-D "__WCHAR_MAX__=0x7fffffff" \
-D "__WCHAR_MIN__=(-__WCHAR_MAX__ - 1)" \
-D "__WCHAR_TYPE__=int" \
-D "__WINT_MAX__=0xffffffffU" \
-D "__WINT_MIN__=0U" \
-D "__WINT_TYPE__=unsigned int" \
-D "__amd64=1" \
-D "__amd64__=1" \
-D "__code_model_small__=1" \
-D "__cplusplus=199711L" \
-D "__cpp_binary_literals=201304" \
-D "__cpp_exceptions=199711" \
-D "__cpp_rtti=199711" \
-D "__cpp_runtime_arrays=198712" \
-D "__gnu_linux__=1" \
-D "__has_include(STR)=__has_include__(STR)" \
-D "__has_include_next(STR)=__has_include_next__(STR)" \
-D "__k8=1" \
-D "__k8__=1" \
-D "__linux=1" \
-D "__linux__=1" \
-D "__unix=1" \
-D "__unix__=1" \
-D "__x86_64=1" \
-D "__x86_64__=1" \
-D "linux=1" \
-D "unix=1" \
--target x86_64-linux-gnu \
--gnu 11.2.0 \
--isystem "/usr/include/c++/11" \
--isystem "/usr/include/x86_64-linux-gnu/c++/11" \
--isystem "/usr/include/c++/11/backward" \
--isystem "/usr/lib/gcc/x86_64-linux-gnu/11/include" \
--isystem "/usr/local/include" \
--isystem "/usr/include/x86_64-linux-gnu" \
--isystem "/usr/include"

ASPECT_PREFIXES ?= *
ASPECT_FILES := $(sort $(shell ls $(patsubst %, ../../0_common/acxx/%.ah, $(ASPECT_PREFIXES)) $(patsubst %, %.ah, $(ASPECT_PREFIXES)) 2> /dev/null))
ifneq ($(ASPECT_FILES),) # aspect files exist
  COPY_ASPECT_FILES = $(COPY) $(ASPECT_FILES) $(INPUT__DIR)_temp
endif
INPUT__DIR := ../src
OUTPUT_DIR := ../output-acxx
MORE_ACXX_OPTS ?= #
PRE_INSTR_CMDS  ?= #
POST_INSTR_CMDS ?= #
TARGETS_JSON := $(patsubst %, %/json, $(TARGETS))

COPY := cp -ra
MOVE := mv
RMRF := rm -rf
COPY_MAKEFILES ?= $(COPY) ../src_makefiles/Makefile $(OUTPUT_DIR)/Makefile

.PHONY: $(OUTPUT_DIR)  all  $(TARGETS)  $(TARGETS_JSON)  clean

ifeq ($(CUSTOM_TARGETS),) # no customized target
ifeq ($(TARGETS),) # one default target
ifneq ($(USE_COMPDB),YES) # no compilation database
$(OUTPUT_DIR): $(INPUT__DIR)
	$(RMRF) $(INPUT__DIR)_temp $(OUTPUT_DIR)
	mkdir $(INPUT__DIR)_temp $(OUTPUT_DIR)
	$(COPY) $(INPUT__DIR)/* $(INPUT__DIR)_temp
	$(COPY_ASPECT_FILES)
	$(PRE_INSTR_CMDS)
	$(ACXX) -p $(INPUT__DIR)_temp -d $(OUTPUT_DIR) $(ACXX_OPTS) $(MORE_ACXX_OPTS)
	$(RMRF) $(INPUT__DIR)_temp
	$(POST_INSTR_CMDS)
	@echo "***Successfully instrumented the benchmark."
	$(COPY_MAKEFILES)
	$(COPY_MORE_MAKEFILES)
	$(COPY) $(INPUT__DIR)/*.sh $(OUTPUT_DIR)
	export INSTRU_TOOL="g++ $(O)"; $(MAKE) -C $(OUTPUT_DIR)
	@echo "***Successfully built the benchmark."
else # one default target and a compilation database
$(OUTPUT_DIR): $(INPUT__DIR)/compile_commands.json
	$(PRE_INSTR_CMDS)
	$(ACXX) -p $(INPUT__DIR) -d $(OUTPUT_DIR) $(ACXX_OPTS) $(MORE_ACXX_OPTS)\
		-b $(INPUT__DIR)/compile_commands.json
	$(POST_INSTR_CMDS)
	@echo "***Successfully instrumented the benchmark."
	$(COPY_MAKEFILES)
	$(COPY_MORE_MAKEFILES)
	export INSTRU_TOOL="g++ $(O)"; $(MAKE) -C $(OUTPUT_DIR)
	@echo "***Successfully built the benchmark."

$(INPUT__DIR)/compile_commands.json:
	cd $(INPUT__DIR) && bear -- make > compile_commands.log 2>&1 && make clean
endif
else # many targets and a compilation database
all: $(OUTPUT_DIR) $(TARGETS)
	@echo "***Successfully built the benchmark."

$(OUTPUT_DIR): $(INPUT__DIR)
	$(RMRF) $(INPUT__DIR)_temp $(OUTPUT_DIR)
	mkdir $(INPUT__DIR)_temp $(OUTPUT_DIR)

$(TARGETS): $(INPUT__DIR)
	$(COPY) $(INPUT__DIR)/* $(INPUT__DIR)_temp
	$(COPY_ASPECT_FILES)
	$(PRE_INSTR_CMDS)
	$(ACXX) -p $(INPUT__DIR)_temp -d $(OUTPUT_DIR) $(ACXX_OPTS) $(MORE_ACXX_OPTS)
	$(RMRF) $(INPUT__DIR)_temp
	$(POST_INSTR_CMDS)
	@echo "***Successfully instrumented the benchmark."
	$(COPY_MAKEFILES)
	$(COPY_MORE_MAKEFILES)
	$(COPY) $(INPUT__DIR)/*.sh $(OUTPUT_DIR)
	export INSTRU_TOOL="g++ $(O)"; $(MAKE) -C $(OUTPUT_DIR) $@
endif
else  # customized targets
all: $(CUSTOM_TARGETS)
	@echo "***Successfully built the benchmark."
endif

clean:
	$(RMRF) $(INPUT__DIR)_temp $(OUTPUT_DIR)
	cd $(INPUT__DIR) && make clean
ifeq ($(TARGETS),)
ifneq ($(USE_COMPDB),YES)
else
	$(RMRF) $(INPUT__DIR)/compile_commands.json $(INPUT__DIR)/compile_commands.log
endif
else
	$(RMRF) $(INPUT__DIR)/compile_commands.json $(INPUT__DIR)/compile_commands.log
endif
	$(CLEAN_CMDS)

# Count the reported errors
small:
	@if [ -z "$${BENCHMARK_RUN_TIMES}" ]; then \
	     export BENCHMARK_COUNT_DOWN=1; \
	 else \
	     export BENCHMARK_COUNT_DOWN="$${BENCHMARK_RUN_TIMES}"; \
	     echo "==== Run $${BENCHMARK_RUN_TIMES} times ===="; \
	 fi; \
	 cd $(OUTPUT_DIR); \
	 while [ $${BENCHMARK_COUNT_DOWN} -ge 1 ]; do \
	     ./runme_small.sh; \
	     export BENCHMARK_COUNT_DOWN=`expr $${BENCHMARK_COUNT_DOWN} - 1`; \
	 done;
ifneq ($(ERROR_FILES)$(ERROR_FILES_small),)
	@../../grep_reported_messages.monitor.sh $(patsubst %,$(OUTPUT_DIR)/%,$(subst RUNTYPE,small,$(ERROR_FILES) $(ERROR_FILES_small)))
endif

large:
	@if [ -z "$${BENCHMARK_RUN_TIMES}" ]; then \
	     export BENCHMARK_COUNT_DOWN=1; \
	 else \
	     export BENCHMARK_COUNT_DOWN="$${BENCHMARK_RUN_TIMES}"; \
	     echo "==== Run $${BENCHMARK_RUN_TIMES} times ===="; \
	 fi; \
	 cd $(OUTPUT_DIR); \
	 while [ $${BENCHMARK_COUNT_DOWN} -ge 1 ]; do \
	     ./runme_large.sh; \
	     export BENCHMARK_COUNT_DOWN=`expr $${BENCHMARK_COUNT_DOWN} - 1`; \
	 done;
ifneq ($(ERROR_FILES)$(ERROR_FILES_large),)
	@../../grep_reported_messages.monitor.sh $(patsubst %,$(OUTPUT_DIR)/%,$(subst RUNTYPE,large,$(ERROR_FILES) $(ERROR_FILES_large)))
endif
