# The make command can set the following variables, e.g., make "VAR=val".
# ACC_OPTS: options appended to the tool command.
# ASPECT_PREFIXES: the prefixes of the aspect files used.

# The parent Makefile can set the following variables:
# COPY_MAKEFILES: the command for copying makefiles.
#   It can be omitted if you use the default command.
# COPY_MORE_MAKEFILES: the additional command for copying makefiles.
# IGN_FILES: the C files to be ignored in instrumentation.
# CUSTOM_TARGETS: the customized targets to be run in instrumentation and build.
#   Note that all details of these targets should be given in the parent Makefile.
#   No more actions are executed except these given targets.
# TARGETS: the targets (in the original benchmark) to be instrumented.
#   It can be omitted if you use the default target.
# USE_COMPDB: YES/NO - whether use compilation database in instrumentation.
# MORE_ACC_OPTS: options appended to the tool command.
# PRE_INSTR_CMDS:  additional commands to be executed before instrumentation.
# GCC_OPTS: options of gcc for preprocessing the C files.
# PRE_ACC_CMDS:    additional commands to be executed before running acc.
# POST_INSTR_CMDS: additional commands to be executed after instrumentation.
# CLEAN_CMDS: additional commands for a customized clean.
#
# ERROR_FILES: the names of the files that contain reported errors.
#   You can use RUNTYPE in file names to match the run type, e.g., small and large.

# Set the path and options of the tool
ACC := acc
LIBACC := -L/home/artifact/bin -lacc

ASPECT_PREFIXES ?= *
ASPECT_FILES := $(sort $(shell ls $(patsubst %, ../../0_common/acc/%.acc, $(ASPECT_PREFIXES)) $(patsubst %, %.acc, $(ASPECT_PREFIXES)) 2> /dev/null))
ASPECT_FILES_C = $(patsubst %.acc, %.c, $(notdir $(ASPECT_FILES)))
ASPECT_FILES_O = $(patsubst %.acc, %.o, $(notdir $(ASPECT_FILES)))
INPUT__DIR := ../src
OUTPUT_DIR := ../output-acc
MORE_ACC_OPTS ?= #
PRE_INSTR_CMDS  ?= #
POST_INSTR_CMDS ?= #
TARGETS_JSON := $(patsubst %, %/json, $(TARGETS))

COPY := cp -ra
RMRF := rm -rf
COPY_MAKEFILES ?= $(COPY) src_makefiles/Makefile $(OUTPUT_DIR)

.PHONY: $(OUTPUT_DIR)  all  $(TARGETS)  $(TARGETS_JSON)  clean

# Get all the C files to be instrumented in the output directory
# by filtering out the C files to be ignored in instrumentation.
IGN_FILES := $(patsubst %, $(OUTPUT_DIR)/%, $(IGN_FILES))
C_FILES := $(sort $(shell find $(INPUT__DIR) -type f -name *.c))
C_FILES := $(patsubst $(INPUT__DIR)/%, $(OUTPUT_DIR)/%, $(C_FILES))
C_FILES := $(filter-out $(IGN_FILES), $(C_FILES))

ifeq ($(CUSTOM_TARGETS),) # no customized target
ifeq ($(TARGETS),) # one default target
ifneq ($(USE_COMPDB),YES) # no compilation database
$(OUTPUT_DIR): $(INPUT__DIR)
	$(RMRF) $(OUTPUT_DIR)
	mkdir $(OUTPUT_DIR)
	$(COPY) $(INPUT__DIR)/* $(OUTPUT_DIR)
	$(PRE_INSTR_CMDS)
	# 1. Preprocess aspect files: *.acc =(mv)=> *.c =(-E)=> *.acc
	# 2. Preprocess C files: *.c =(-E)=> *.mc
	# 3. Instrument preprocessed files: *.acc and *.mc => *.c
	for file in $(ASPECT_FILES); do \
	  $(COPY) $$file $(OUTPUT_DIR); \
	  file=$${file##*/}; \
	  mv $(OUTPUT_DIR)/$$file $(OUTPUT_DIR)/$${file%.acc*}.c; \
	  gcc $(GCC_OPTS) -E $(OUTPUT_DIR)/$${file%.acc*}.c > $(OUTPUT_DIR)/$$file; \
	  ASPECT_FILES_E=$$ASPECT_FILES_E" $(OUTPUT_DIR)/$$file"; \
	  $(RMRF) $(OUTPUT_DIR)/$${file%.acc*}.c; \
	done; \
	for file in $(C_FILES); do \
	  gcc $(GCC_OPTS) -E $$file > $${file%.c*}.e; \
	  sed 's/_Float128/float/g' $${file%.c*}.e > $${file%.c*}.mc; \
	  C_FILES_E=$$C_FILES_E" $${file%.c*}.mc"; \
	  $(RMRF) $$file $${file%.c*}.e; \
	done; \
	$(PRE_ACC_CMDS) \
	$(ACC) $$ASPECT_FILES_E $$C_FILES_E $(ACC_OPTS) $(MORE_ACC_OPTS)
	$(POST_INSTR_CMDS)
	@echo "***Successfully instrumented the benchmark."
	$(COPY_MAKEFILES)
	$(COPY_MORE_MAKEFILES)
	export INSTRU_TOOL="gcc $(O)"; export ASPECT_FILES_C="$(ASPECT_FILES_C)"; \
	export ASPECT_FILES_O="$(ASPECT_FILES_O)"; export LIBACC="$(LIBACC)"; \
	$(MAKE) -C $(OUTPUT_DIR)
	@echo "***Successfully built the benchmark."
else # one default target and a compilation database
$(OUTPUT_DIR): $(INPUT__DIR)/compile_commands.json
	$(PRE_INSTR_CMDS)
	$(ACC) -p $(INPUT__DIR) -d $(OUTPUT_DIR) $(ACC_OPTS) $(MORE_ACC_OPTS)\
		-b $(INPUT__DIR)/compile_commands.json
	$(POST_INSTR_CMDS)
	@echo "***Successfully instrumented the benchmark."
	$(COPY_MAKEFILES)
	$(COPY_MORE_MAKEFILES)
	export INSTRU_TOOL="gcc $(O)"; export ASPECT_FILES_C="$(ASPECT_FILES_C)"; \
	export ASPECT_FILES_O="$(ASPECT_FILES_O)"; export LIBACC="$(LIBACC)"; \
	$(MAKE) -C $(OUTPUT_DIR)
	@echo "***Successfully built the benchmark."

$(INPUT__DIR)/compile_commands.json:
	cd $(INPUT__DIR) && bear -- make > compile_commands.log 2>&1 && make clean
endif
else # many targets and a compilation database
all: $(OUTPUT_DIR) $(TARGETS)
	@echo "***Successfully built the benchmark."

$(OUTPUT_DIR): $(INPUT__DIR)
	$(RMRF) $(OUTPUT_DIR)
	mkdir $(OUTPUT_DIR)

$(TARGETS): $(INPUT__DIR)
	$(COPY) $(INPUT__DIR)/* $(OUTPUT_DIR)
	$(PRE_INSTR_CMDS)
	# 1. Preprocess aspect files: *.acc =(mv)=> *.c =(-E)=> *.acc
	# 2. Preprocess C files: *.c =(-E)=> *.mc
	# 3. Instrument preprocessed files: *.acc and *.mc => *.c
	for file in $(ASPECT_FILES); do \
	  $(COPY) $$file $(OUTPUT_DIR); \
	  file=$${file##*/}; \
	  mv $(OUTPUT_DIR)/$$file $(OUTPUT_DIR)/$${file%.acc*}.c; \
	  gcc $(GCC_OPTS) -E $(OUTPUT_DIR)/$${file%.acc*}.c > $(OUTPUT_DIR)/$$file; \
	  ASPECT_FILES_E=$$ASPECT_FILES_E" $(OUTPUT_DIR)/$$file"; \
	  $(RMRF) $(OUTPUT_DIR)/$${file%.acc*}.c; \
	done; \
	for file in $(C_FILES); do \
	  gcc $(GCC_OPTS) -E $$file > $${file%.c*}.e; \
	  sed 's/_Float128/float/g' $${file%.c*}.e > $${file%.c*}.mc; \
	  C_FILES_E=$$C_FILES_E" $${file%.c*}.mc"; \
	  $(RMRF) $$file $${file%.c*}.e; \
	done; \
	$(PRE_ACC_CMDS) \
	$(ACC) $$ASPECT_FILES_E $$C_FILES_E $(ACC_OPTS) $(MORE_ACC_OPTS)
	$(POST_INSTR_CMDS)
	@echo "***Successfully instrumented the benchmark."
	$(COPY_MAKEFILES)
	$(COPY_MORE_MAKEFILES)
	export INSTRU_TOOL="gcc $(O)"; export ASPECT_FILES_C="$(ASPECT_FILES_C)"; \
	export ASPECT_FILES_O="$(ASPECT_FILES_O)"; export LIBACC="$(LIBACC)"; \
	$(MAKE) -C $(OUTPUT_DIR) $@
endif
else  # customized targets
all: $(CUSTOM_TARGETS)
	@echo "***Successfully built the benchmark."
endif

clean:
	$(RMRF) $(INPUT__DIR)_temp $(OUTPUT_DIR)
	cd $(INPUT__DIR) && make clean
ifeq ($(TARGETS),)
ifneq ($(USE_COMPDB),YES)
else
	$(RMRF) $(INPUT__DIR)/compile_commands.json $(INPUT__DIR)/compile_commands.log
endif
else
	$(RMRF) $(INPUT__DIR)/compile_commands.json $(INPUT__DIR)/compile_commands.log
endif
	$(CLEAN_CMDS)

# Count the reported errors
small:
	@if [ -z "$${BENCHMARK_RUN_TIMES}" ]; then \
	     export BENCHMARK_COUNT_DOWN=1; \
	 else \
	     export BENCHMARK_COUNT_DOWN="$${BENCHMARK_RUN_TIMES}"; \
	     echo "==== Run $${BENCHMARK_RUN_TIMES} times ===="; \
	 fi; \
	 cd $(OUTPUT_DIR); \
	 while [ $${BENCHMARK_COUNT_DOWN} -ge 1 ]; do \
	     ./runme_small.sh; \
	     export BENCHMARK_COUNT_DOWN=`expr $${BENCHMARK_COUNT_DOWN} - 1`; \
	 done;
ifneq ($(ERROR_FILES)$(ERROR_FILES_small),)
	@../../grep_reported_messages.monitor.sh $(patsubst %,$(OUTPUT_DIR)/%,$(subst RUNTYPE,small,$(ERROR_FILES) $(ERROR_FILES_small)))
endif

large:
	@if [ -z "$${BENCHMARK_RUN_TIMES}" ]; then \
	     export BENCHMARK_COUNT_DOWN=1; \
	 else \
	     export BENCHMARK_COUNT_DOWN="$${BENCHMARK_RUN_TIMES}"; \
	     echo "==== Run $${BENCHMARK_RUN_TIMES} times ===="; \
	 fi; \
	 cd $(OUTPUT_DIR); \
	 while [ $${BENCHMARK_COUNT_DOWN} -ge 1 ]; do \
	     ./runme_large.sh; \
	     export BENCHMARK_COUNT_DOWN=`expr $${BENCHMARK_COUNT_DOWN} - 1`; \
	 done;
ifneq ($(ERROR_FILES)$(ERROR_FILES_large),)
	@../../grep_reported_messages.monitor.sh $(patsubst %,$(OUTPUT_DIR)/%,$(subst RUNTYPE,large,$(ERROR_FILES) $(ERROR_FILES_large)))
endif
